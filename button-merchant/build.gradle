/*
 * build.gradle
 *
 * Copyright (c) 2018 Button, Inc. (https://usebutton.com)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco-android'

group = 'com.usebutton.merchant'
version = libraryVersionName

apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName version

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }
}

configurations {
    jaxDoclet
    classpaths
}

task javadocJar(type: Jar, dependsOn: "generateReleaseJavadoc") {
    classifier = 'javadoc'
    from new File(project(':button-merchant').buildDir, "/docs/javadoc/")
}

android.libraryVariants.all { variant ->

    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        source = variant.javaCompile.source
        title = null
        List<File> pathList = new ArrayList<File>()
        pathList.add(file('./doclava-1.0.6.jar'))
        options.docletpath = pathList
        options.classpath = configurations.classpaths.files.asType(List)
        options {
            doclet "com.google.doclava.Doclava"
            bootClasspath new File(System.getenv('JAVA_HOME') + "/jre/lib/rt.jar")
            addStringOption "hdf project.name", "Button Merchant Library ${libraryVersionName}"
            addStringOption "public"
            addStringOption "templatedir", "javadoc"
            addStringOption "verbose"

            addStringOption "federate jdk", "http://download.oracle.com/javase/6/docs/api/index.html?"
            addStringOption "federationxml jdk", "http://doclava.googlecode.com/svn/static/api/openjdk-6.xml"
            addStringOption "federate android", "http://d.android.com/reference"
            addStringOption "federationxml android", "http://doclava.googlecode.com/svn/static/api/android-10.xml"
        }
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
        exclude '**/internal/**'
        exclude '**/thirdparty/**'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "com.android.support:support-annotations:$supportLibVersion"
    implementation "com.google.android.gms:play-services-ads:$playServicesVersion"
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.10.0'
    testImplementation 'org.json:json:20171018'
    androidTestImplementation "com.android.support.test:runner:$testRunnerVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "org.mockito:mockito-android:$mockitoVersion"
}

bintray {
    user = project.hasProperty('bintrayUsername') ? project.property('bintrayUsername') :
            System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') :
            System.getenv('BINTRAY_API_KEY')

    configurations = ['archives']
    publish = true
    override = libraryVersionName.endsWith("-SNAPSHOT")

    pkg {
        repo = 'Public'
        name = 'android-merchant-library'
        desc = "Button Merchant Library for Android v${libraryVersionName}"
        userOrg = 'button'
        websiteUrl = 'https://github.com/button/button-merchant-android'
        issueTrackerUrl = 'https://github.com/button/button-merchant-android/issues'
        vcsUrl = 'https://github.com/button/button-merchant-android.git'
        labels = ['aar', 'android', 'button']
        publicDownloadNumbers = false
        licenses = ['MIT']

        version {
            name = libraryVersionName
        }
    }
}

artifacts {
    archives javadocJar
}

task jacocoReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      'com/usebutton/merchant/exception/**',
                      'com/usebutton/merchant/ThreadManager.*'
    ]

    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoReport/jacocoReport.xml"
}

tasks.coveralls {
    dependsOn 'jacocoReport'
}
